name: QuantBot CI Pipeline 
 
on: [push, pull_request]
 
jobs:
  build:
    runs-on: ubuntu-latest 
    steps:
    - uses: actions/checkout@v3
 
    - name: Build TA-Lib (Minimal)
      run: |
        # 创建隔离构建目录
        mkdir -p "$GITHUB_WORKSPACE/ta-lib-build"
        cd "$GITHUB_WORKSPACE/ta-lib-build"
        
        # 下载源码
        wget https://downloads.sourceforge.net/project/ta-lib/ta-lib/0.4.0/ta-lib-0.4.0-src.tar.gz  
        tar -xzf ta-lib-0.4.0-src.tar.gz 
        cd ta-lib
 
        # 关键修复：跳过问题组件编译 
        sed -i '/^SUBDIRS/s/ tools//' Makefile.am  
        sed -i 's/ta_regtest //' src/Makefile.am 
        
        # 生成构建系统 
        autoreconf -vif
        ./configure --prefix="$GITHUB_WORKSPACE/ta-lib-install" \
                   --disable-static \
                   --enable-shared \
                   --disable-dependency-tracking
 
        # 仅编译核心模块 
        make -C src/ta_common 
        make -C src/ta_func 
        make -C src/ta_abstract 
        
        # 安装到隔离目录
        make install
 
    - name: Setup Python Environment 
      run: |
        echo "TA_LIBRARY_PATH=$GITHUB_WORKSPACE/ta-lib-install/lib" >> $GITHUB_ENV
        echo "TA_INCLUDE_PATH=$GITHUB_WORKSPACE/ta-lib-install/include" >> $GITHUB_ENV 
        
        pip install numpy Cython
        TA_LIBRARY_PATH=$GITHUB_WORKSPACE/ta-lib-install/lib \
        TA_INCLUDE_PATH=$GITHUB_WORKSPACE/ta-lib-install/include \
        pip install TA-Lib 
 
    - name: Verify Installation
      run: |
        python -c "import talib; print(f'TA-Lib {talib.__version__} loaded successfully')"
        python -c "from talib import RSI, MACD; print('Core functions verified')"